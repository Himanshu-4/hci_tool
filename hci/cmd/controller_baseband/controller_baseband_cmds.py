"""
Controller and Baseband HCI Commands

This module provides classes for Controller and Baseband HCI commands.
"""

import struct
from typing import List, Dict, Any, ClassVar, Optional, Tuple, Union
from enum import IntEnum

from ..cmd_base_packet import HciCmdBasePacket
from ..cmd_opcodes import HciOpcode, create_opcode, OGF, ControllerBasebandOCF
from .. import register_command



class SetEventMask(HciCmdBasePacket):
    """Set Event Mask Command"""
    
    OPCODE = HciOpcode.SET_EVENT_MASK
    NAME = "Set_Event_Mask"
    
    def __init__(self, event_mask: int = 0x00001FFFFFFFFFFF):
        """
        Initialize Set Event Mask Command
        
        Args:
            event_mask: 8-byte bitmask that controls which events are generated by the controller
                        Default: All events except reserved bits
        """
        super().__init__(event_mask=event_mask)
    
    def _validate_params(self) -> None:
        """Validate command parameters"""
        if not (0 <= self.params['event_mask'] <= 0xFFFFFFFFFFFFFFFF):
            raise ValueError(f"Invalid event_mask: {self.params['event_mask']}, must be an 8-byte value")
    
    def _serialize_params(self) -> bytes:
        """Serialize parameters to bytes"""
        return struct.pack("<Q", self.params['event_mask'])
    
    @classmethod
    def from_bytes(cls, data: bytes) -> 'SetEventMask':
        """Create command from parameter bytes (excluding header)"""
        if len(data) < 8:
            raise ValueError(f"Invalid data length: {len(data)}, expected at least 8 bytes")
        
        event_mask = struct.unpack("<Q", data[:8])[0]
        
        return cls(event_mask=event_mask)
    
    def __str__(self) -> str:
        """String representation of the command packet"""
        return super().__str__() + f"Event Mask: 0x{self.params['event_mask']:016X}\r\n"

class WriteLocalName(HciCmdBasePacket):
    """Write Local Name Command"""
    
    OPCODE = create_opcode(OGF.CONTROLLER_BASEBAND, ControllerBasebandOCF.WRITE_LOCAL_NAME)
    NAME = "Write_Local_Name"
    MAX_NAME_LENGTH: ClassVar[int] = 248  # Maximum length for local name in bytes
    
    def __init__(self, local_name: str):
        """
        Initialize Write Local Name Command
        
        Args:
            local_name: The name to set for the local device (up to 248 bytes)
        """
        # Convert string to bytes if needed
        if isinstance(local_name, str):
            local_name = local_name.encode('utf-8')
            
        super().__init__(local_name=local_name)
    
    def _validate_params(self) -> None:
        """Validate command parameters"""
        if len(self.params['local_name']) > WriteLocalName. MAX_NAME_LENGTH:
            raise ValueError(f"Invalid local_name length: {len(self.params['local_name'])}, must be at most 248 bytes")
    
    def _serialize_params(self) -> bytes:
        """Serialize parameters to bytes"""
        # Pad name to 248 bytes
        local_name = self.params['local_name'] + b'\x00' * (248 - len(self.params['local_name']))
        return struct.pack("<248s", local_name)
    
    @classmethod
    def from_bytes(cls, data: bytes) -> 'WriteLocalName':
        """Create command from parameter bytes (excluding header)"""
        if len(data) < 248:
            raise ValueError(f"Invalid data length: {len(data)}, expected at least 248 bytes")
        
        local_name = data[:248].rstrip(b'\x00')
        
        return cls(local_name=local_name)
    
    def __str__(self) -> str:
        """String representation of the command packet"""
        local_name_str = self.params['local_name'].decode('utf-8', errors='replace')
        return super().__str__() + f"\r\nLocal Name: {local_name_str}"




def set_event_mask(event_mask: int = 0x00001FFFFFFFFFFF) -> SetEventMask:
    """Create Set Event Mask Command"""
    return SetEventMask(event_mask=event_mask)

def write_local_name(local_name: str) -> WriteLocalName:
    """Create Write Local Name Command"""
    return WriteLocalName(local_name=local_name)


# Register all command classes
register_command(SetEventMask)
register_command(WriteLocalName)

# Export public functions and classes
__all__ = [

    'set_event_mask',
    'write_local_name',
    'SetEventMask',
    'WriteLocalName',
]